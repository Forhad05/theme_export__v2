{{ 'component-card.css' | asset_url | stylesheet_tag }}
{{ 'component-price.css' | asset_url | stylesheet_tag }}
{{ 'mask-blobs.css' | asset_url | stylesheet_tag }}
{{ 'quick-add.css' | asset_url | stylesheet_tag }}

<script src="{{ 'quick-add.js' | asset_url }}" defer="defer"></script>
<script src="{{ 'product-form.js' | asset_url }}" defer="defer"></script>

{%- style -%}
  .recently-viewed {
    display: block;
  }

  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }
{%- endstyle -%}

<recently-viewed 
  aria-expanded="false"
  class="recently-viewed" 
  data-show-products="{{ section.settings.products_to_show }}"
  data-product-handle="{{ product.handle }}"
  data-product-id="{{ product.id }}"
>
  <div class="section-{{ section.id }}-padding color-{{ section.settings.color_scheme }} gradient">
    <div class="recently-viewed--wrap page-width">
      {%- if section.settings.title != blank -%}
        <div class="title-wrapper title-wrapper--no-top-margin {{ section.settings.align_heading }}">
          <h2 class="title inline-richtext {{ section.settings.heading_size }}{% if section.settings.title_icon != blank %} title__icon-wrapper{% endif %}{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}">
            <span>{{ section.settings.title }}</span>
          </h2>
        </div>
      {%- endif -%}
      <div id="productGrid" class="grid grid--{{ section.settings.columns_mobile }}-col grid--{{ section.settings.columns_desktop }}-col-desktop"></div>
    </div>
  </div>
</recently-viewed>

<script>
if (!customElements.get('recently-viewed')) {
  customElements.define(
    'recently-viewed',
    class RecentlyViewedProducts extends HTMLElement {
      constructor() {
        super();
        this.productId = this.dataset.productId;
        this.productHandle = this.dataset.productHandle;
        this.recentlyViewedContainer = this.querySelector('#productGrid');
        this.numberOfProducts = parseInt(this.dataset.showProducts);
    
        document.addEventListener('DOMContentLoaded', () => {
          this.renderProduct();
          this.getListProduct() && this.getviewedProducts(this.getListProduct());
        });
      }
    
      getListProduct() {
        let data = localStorage.getItem('recently-viewed-storage');
        data = JSON.parse(data);
        return data;
      }
    
      setListProduct(product) {
        let data = localStorage.getItem('recently-viewed-storage');
        if (data !== null && data !== '{}' && data !== '[null]') {
          data = JSON.parse(data);
        } else {
          data = [];
        }
    
        const productWithId = {
          [this.productId]: product
        };
    
        const duplicateItem = data.find(item => Object.keys(item)[0] === Object.keys(productWithId)[0]);
        if(duplicateItem) data = data.filter(item => item !== duplicateItem);
    
        data.unshift(productWithId);
        if (data.length >= this.numberOfProducts) data = data.slice(0, this.numberOfProducts);
        localStorage.setItem('recently-viewed-storage', JSON.stringify(data));
      }
    
      async renderProduct() {
        const product = `/products/${this.productHandle}`;
        const headers = {
          'Content-Type': 'application/json', 
          Accept: `application/json`
        };
    
        // const adminApi = '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';
        // const headers = {
        //   'X-Shopify-Access-Token': adminApi,
        //   'Content-Type': 'application/json', 
        //   Accept: `application/json`
        // };
        
        // Fetch product data using productId
        fetch(product, {headers})
          .then(response => {
            if (!response.ok) {
              throw new Error('Network response was not ok');
            }
            return response.json();
          })
          .then(productData => {
            this.setListProduct(productData);
          })
          .catch(error => {
            console.error('There was a problem fetching the product:', error);
          });
      }
    
      fetchProductCardHTML(handle) {
        const productTileTemplateUrl = `/products/${handle}?view=card-product`;
        return fetch(productTileTemplateUrl)
        .then((res) => res.text())
        .then((res) => {
          const text = res;
          const parser = new DOMParser();
          const htmlDocument = parser.parseFromString(text, 'text/html');
          const productCard = htmlDocument.documentElement.querySelector('.product-card-wrapper');
          return productCard;
        })
        .catch((err) => console.error(`[Shopify Recently Viewed] Failed to load content for handle: ${handle}`, err));
      }
    
      async getviewedProducts(data) {
        try {
          const handles = [];
          data.forEach((item) => {
            const product = item[Object.keys(item)[0]];
            if(product && product.product && product.product.handle) handles.push(product.product.handle);
          });
          
          const productCardPromises = handles.map(handle => this.fetchProductCardHTML(handle));
      
          const productCards = await Promise.all(productCardPromises);
          productCards.forEach((productCard, index) => {
            if (productCard) {
              const productGrid = document.createElement('div');
              productGrid.classList.add('grid__item', 'scroll-trigger', 'animate--slide-in');
              productGrid.setAttribute('data-cascade', '');
              productGrid.style.setProperty('--animation-order', `${index}`);
    
              productGrid.appendChild(productCard);
              this.recentlyViewedContainer.appendChild(productGrid);
            }
          });
        } catch (err) {
          console.error('[Shopify recently viewed] Error fetching product cards:', err);
        } finally {
          this.setAttribute('aria-expanded', 'true');
        }
      }  
    }
  );
}
</script>

{% schema %}
{
  "name": "Recently viewed products",
  "settings": [
    {
      "type": "inline_richtext",
      "id": "title",
      "default": "Recently viewed",
      "label": "t:sections.featured-collection.settings.title.label"
    },
    {
      "type": "select",
      "id": "heading_size",
      "options": [
        {
          "value": "h2",
          "label": "t:sections.all.heading_size.options__1.label"
        },
        {
          "value": "h1",
          "label": "t:sections.all.heading_size.options__2.label"
        },
        {
          "value": "h0",
          "label": "t:sections.all.heading_size.options__3.label"
        }
      ],
      "default": "h1",
      "label": "t:sections.all.heading_size.label"
    },
    {
      "type": "select",
      "id": "align_heading",
      "label": "Align heading",
      "default": "center",
      "options": [
        {
          "value": "left",
          "label": "Left"
        },
        {
          "value": "center",
          "label": "Center"
        }
      ]
    },
    {
      "type": "range",
      "id": "products_to_show",
      "min": 2,
      "max": 25,
      "step": 1,
      "default": 4,
      "label": "t:sections.featured-collection.settings.products_to_show.label"
    },
    {
      "type": "range",
      "id": "columns_desktop",
      "min": 1,
      "max": 6,
      "step": 1,
      "default": 4,
      "label": "t:sections.featured-collection.settings.columns_desktop.label"
    },
    {
      "type": "header",
      "content": "t:sections.featured-collection.settings.header_mobile.content"
    },
    {
      "type": "select",
      "id": "columns_mobile",
      "default": "2",
      "label": "t:sections.featured-collection.settings.columns_mobile.label",
      "options": [
        {
          "value": "1",
          "label": "t:sections.featured-collection.settings.columns_mobile.options__1.label"
        },
        {
          "value": "2",
          "label": "t:sections.featured-collection.settings.columns_mobile.options__2.label"
        }
      ]
    },
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:sections.all.colors.label",
      "info": "t:sections.all.colors.has_cards_info",
      "default": "scheme-1"
    },
    {
      "type": "header",
      "content": "t:sections.all.padding.section_padding_heading"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 36
    }
  ],
  "enabled_on": {
    "groups": ["aside"],
    "templates": ["product"]
  },
  "presets": [
    {
      "name": "Recently viewed products"
    }
  ]
}
{% endschema %}
