{{ 'component-card.css' | asset_url | stylesheet_tag }}
{{ 'component-price.css' | asset_url | stylesheet_tag }}

{{ 'component-slider.css' | asset_url | stylesheet_tag }}
{{ 'template-collection.css' | asset_url | stylesheet_tag }}

{% if section.settings.image_shape == 'blob' %}
  {{ 'mask-blobs.css' | asset_url | stylesheet_tag }}
{%- endif -%}

{%- if section.settings.enable_quick_add -%}
  {{ 'quick-add.css' | asset_url | stylesheet_tag }}
  <script src="{{ 'quick-add.js' | asset_url }}" defer="defer"></script>
  <script src="{{ 'product-form.js' | asset_url }}" defer="defer"></script>
{%- endif -%}

{%- style -%}
  .recently-viewed,
  .recently-viewed-card {
    display: block;
  }
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }
  {% if section.settings.full_width %}
    #shopify-section-{{ section.id }} {
      --page-width: 100%;
    }
  {% endif %}
{%- endstyle -%}

<recently-viewed
  aria-expanded="false"
  class="recently-viewed"
  data-design-mode="{{ request.design_mode }}"
  data-animation="{{ settings.animations_reveal_on_scroll }}"
  data-show-products="{{ section.settings.products_to_show }}"
  data-product-handle="{{ product.handle }}"
  data-product-id="{{ product.id }}"
>
  <div class="color-{{ section.settings.color_scheme }} isolate gradient">
    <div class="collection section-{{ section.id }}-padding">
      <div class="collection__title title-wrapper title-wrapper--no-top-margin page-width {{ section.settings.heading_alignment }}">
        {%- if section.settings.title != blank -%}
          <h2 class="title inline-richtext {{ section.settings.heading_size }}{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}">
            {{ section.settings.title }}
          </h2>
        {%- endif -%}
        {%- if section.settings.description != blank
          or section.settings.show_description
          and section.settings.collection.description != empty
        -%}
          <div class="collection__description {{ section.settings.description_style }} rte{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}">
            {%- if section.settings.show_description -%}
              {{ section.settings.collection.description }}
            {%- else -%}
              {{ section.settings.description -}}
            {%- endif %}
          </div>
        {%- endif -%}
      </div>

      <div class="page-width">
        <recently-viewed-card class="recently-viewed-card{% unless request.design_mode %} hidden{% endunless %}">
          <div class="grid grid--{{ section.settings.columns_mobile }}-col grid--{{ section.settings.columns_desktop }}-col-desktop">
            <div class="grid__item">
              {% render 'card-product',
                card_product: product,
                media_aspect_ratio: section.settings.image_ratio,
                image_shape: section.settings.image_shape,
                show_secondary_image: section.settings.show_secondary_image,
                show_vendor: section.settings.show_vendor,
                show_rating: section.settings.show_rating,
                show_quick_add: section.settings.enable_quick_add,
                section_id: section.id
              %}
            </div>
            {% assign additional_grids = section.settings.columns_desktop | minus: 1 %}
            {% for i in (1..additional_grids) %}
              <div class="grid__item"><div></div></div>
            {% endfor %}
          </div>
        </recently-viewed-card>
        <div id="productGrid" class="grid grid--{{ section.settings.columns_mobile }}-col grid--{{ section.settings.columns_desktop }}-col-desktop"></div>
      </div>

      {% if section.settings.image_shape == 'arch' %}
        {% render 'mask-arch' %}
      {%- endif -%}
    </div>
  </div>
</recently-viewed>
<script>
  if (!customElements.get('recently-viewed')) {
    customElements.define(
      'recently-viewed',
      class RecentlyViewedProducts extends HTMLElement {
        constructor() {
          super();
          this.productId = this.dataset.productId;
          this.productHandle = this.dataset.productHandle;
          this.recentlyViewedContainer = this.querySelector('#productGrid');
          this.numberOfProducts = parseInt(this.dataset.showProducts);

          document.addEventListener('DOMContentLoaded', () => {
            this.renderProduct();
            this.getListProduct() && this.getviewedProducts(this.getListProduct());
          });
        }

        getListProduct() {
          let data = localStorage.getItem('recently-viewed-storage');
          data = JSON.parse(data);
          return data;
        }

        setListProduct(product) {
          let data = localStorage.getItem('recently-viewed-storage');
          if (data !== null && data !== '{}' && data !== '[null]') {
            data = JSON.parse(data);
          } else {
            data = [];
          }

          const productWithId = {
            [this.productId]: product
          };

          const duplicateItem = data.find(item => Object.keys(item)[0] === Object.keys(productWithId)[0]);
          if(duplicateItem) data = data.filter(item => item !== duplicateItem);

          data.unshift(productWithId);
          if (data.length >= this.numberOfProducts) data = data.slice(0, this.numberOfProducts);
          localStorage.setItem('recently-viewed-storage', JSON.stringify(data));
          if(this.dataset.designMode === 'true') {
            if(data.length > 1) {
              this.querySelector('recently-viewed-card').classList.add('hidden');
            } else {
              this.querySelector('#productGrid').classList.add('hidden');
            }
          } else {
            this.closest('.shopify-section').style.display = data.length > 1 ? 'block' : 'none';
          }
        }

        async renderProduct() {
          const product = `/products/${this.productHandle}`;
          const headers = {
            'Content-Type': 'application/json',
            Accept: `application/json`
          };

          // const adminApi = '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';
          // const headers = {
          //   'X-Shopify-Access-Token': adminApi,
          //   'Content-Type': 'application/json',
          //   Accept: `application/json`
          // };

          // Fetch product data using productId
          fetch(product, {headers})
            .then(response => {
              if (!response.ok) {
                throw new Error('Network response was not ok');
              }
              return response.json();
            })
            .then(productData => {
              this.setListProduct(productData);
            })
            .catch(error => {
              console.error('There was a problem fetching the product:', error);
            });
        }

        fetchProductCardHTML(handle) {
          const productTileTemplateUrl = `/products/${handle}`;
          return fetch(productTileTemplateUrl)
          .then((res) => res.text())
          .then((res) => {
            const text = res;
            const parser = new DOMParser();
            const htmlDocument = parser.parseFromString(text, 'text/html');
            const productCard = htmlDocument.documentElement.querySelector('recently-viewed-card .product-card-wrapper');
            return productCard;
          })
          .catch((err) => console.error(`[Shopify Recently Viewed] Failed to load content for handle: ${handle}`, err));
        }

        async getviewedProducts(data) {
          if(!data.length >= 1) return;
          try {
            const handles = [];
            data.forEach((item) => {
              const product = item[Object.keys(item)[0]];
              if(product && product.product && product.product.handle) handles.push(product.product.handle);
            });

            const productCardPromises = handles.map(handle => this.fetchProductCardHTML(handle));

            const productCards = await Promise.all(productCardPromises);
            productCards.forEach((productCard, index) => {
              if (productCard) {
                const productGrid = document.createElement('div');
                if(this.dataset.animation === 'false') {
                  productGrid.classList.add('grid__item');
                } else {
                  productGrid.classList.add('grid__item', 'scroll-trigger', 'animate--slide-in');
                  productGrid.setAttribute('data-cascade', '');
                  productGrid.style.setProperty('--animation-order', `${index}`);
                }
                productGrid.appendChild(productCard);
                this.recentlyViewedContainer.appendChild(productGrid);
              }
            });
          } catch (err) {
            console.error('[Shopify recently viewed] Error fetching product cards:', err);
          } finally {
            this.setAttribute('aria-expanded', 'true');
          }
        }
      }
    );
  }
</script>
{% schema %}
{
  "name": "Recently Viewed",
  "tag": "section",
  "class": "section",
  "enabled_on": {
    "groups": ["aside"],
    "templates": ["product"]
  },
  "settings": [
    {
      "type": "inline_richtext",
      "id": "title",
      "default": "Recently Viewed",
      "label": "t:sections.featured-collection.settings.title.label"
    },
    {
      "type": "select",
      "id": "heading_size",
      "options": [
        {
          "value": "h4",
          "label": "t:sections.all.heading_size.options__x.label"
        },
        {
          "value": "h3",
          "label": "t:sections.all.heading_size.options__0.label"
        },
        {
          "value": "h2",
          "label": "t:sections.all.heading_size.options__1.label"
        },
        {
          "value": "h1",
          "label": "t:sections.all.heading_size.options__2.label"
        },
        {
          "value": "h0",
          "label": "t:sections.all.heading_size.options__3.label"
        }
      ],
      "default": "h1",
      "label": "t:sections.all.heading_size.label"
    },
    {
      "type": "select",
      "id": "heading_alignment",
      "label": "Heading alignment",
      "options":[
        {
          "value": "left",
          "label": "Left"
        },
        {
          "value": "center",
          "label": "Center"
        },
        {
          "value": "right",
          "label": "Right"
        }
      ],
      "default": "left"
    },
    {
      "type": "richtext",
      "id": "description",
      "label": "t:sections.featured-collection.settings.description.label"
    },
    {
      "type": "checkbox",
      "id": "show_description",
      "label": "t:sections.featured-collection.settings.show_description.label",
      "default": false
    },
    {
      "type": "select",
      "id": "description_style",
      "label": "t:sections.featured-collection.settings.description_style.label",
      "options": [
        {
          "value": "body",
          "label": "t:sections.featured-collection.settings.description_style.options__1.label"
        },
        {
          "value": "subtitle",
          "label": "t:sections.featured-collection.settings.description_style.options__2.label"
        },
        {
          "value": "uppercase",
          "label": "t:sections.featured-collection.settings.description_style.options__3.label"
        }
      ],
      "default": "body"
    },
    {
      "type": "range",
      "id": "products_to_show",
      "min": 2,
      "max": 5,
      "step": 1,
      "default": 5,
      "label": "t:sections.featured-collection.settings.products_to_show.label"
    },
    {
      "type": "range",
      "id": "columns_desktop",
      "min": 1,
      "max": 5,
      "step": 1,
      "default": 4,
      "label": "t:sections.featured-collection.settings.columns_desktop.label"
    },
    {
      "type": "checkbox",
      "id": "full_width",
      "label": "t:sections.featured-collection.settings.full_width.label",
      "default": false
    },
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:sections.all.colors.label",
      "info": "t:sections.all.colors.has_cards_info",
      "default": "background-1"
    },
    {
      "type": "header",
      "content": "t:sections.featured-collection.settings.header.content"
    },
    {
      "type": "select",
      "id": "image_ratio",
      "options": [
        {
          "value": "adapt",
          "label": "t:sections.featured-collection.settings.image_ratio.options__1.label"
        },
        {
          "value": "portrait",
          "label": "t:sections.featured-collection.settings.image_ratio.options__2.label"
        },
        {
          "value": "square",
          "label": "t:sections.featured-collection.settings.image_ratio.options__3.label"
        }
      ],
      "default": "adapt",
      "label": "t:sections.featured-collection.settings.image_ratio.label"
    },
    {
      "type": "select",
      "id": "image_shape",
      "options": [
        {
          "value": "default",
          "label": "t:sections.all.image_shape.options__1.label"
        },
        {
          "value": "arch",
          "label": "t:sections.all.image_shape.options__2.label"
        },
        {
          "value": "blob",
          "label": "t:sections.all.image_shape.options__3.label"
        },
        {
          "value": "chevronleft",
          "label": "t:sections.all.image_shape.options__4.label"
        },
        {
          "value": "chevronright",
          "label": "t:sections.all.image_shape.options__5.label"
        },
        {
          "value": "diamond",
          "label": "t:sections.all.image_shape.options__6.label"
        },
        {
          "value": "parallelogram",
          "label": "t:sections.all.image_shape.options__7.label"
        },
        {
          "value": "round",
          "label": "t:sections.all.image_shape.options__8.label"
        }
      ],
      "default": "default",
      "label": "t:sections.all.image_shape.label",
      "info": "t:sections.all.image_shape.info"
    },
    {
      "type": "checkbox",
      "id": "show_secondary_image",
      "default": false,
      "label": "t:sections.featured-collection.settings.show_secondary_image.label"
    },
    {
      "type": "checkbox",
      "id": "show_vendor",
      "default": false,
      "label": "t:sections.featured-collection.settings.show_vendor.label"
    },
    {
      "type": "checkbox",
      "id": "show_rating",
      "default": false,
      "label": "t:sections.featured-collection.settings.show_rating.label",
      "info": "t:sections.featured-collection.settings.show_rating.info"
    },
    {
      "type": "checkbox",
      "id": "enable_quick_add",
      "default": false,
      "label": "t:sections.featured-collection.settings.enable_quick_buy.label"
    },
    {
      "type": "header",
      "content": "t:sections.featured-collection.settings.header_mobile.content"
    },
    {
      "type": "select",
      "id": "columns_mobile",
      "default": "2",
      "label": "t:sections.featured-collection.settings.columns_mobile.label",
      "options": [
        {
          "value": "1",
          "label": "t:sections.featured-collection.settings.columns_mobile.options__1.label"
        },
        {
          "value": "2",
          "label": "t:sections.featured-collection.settings.columns_mobile.options__2.label"
        }
      ]
    },
    {
      "type": "header",
      "content": "t:sections.all.padding.section_padding_heading"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 36
    }
  ],
  "presets": [
    {
      "name": "Recently Viewed"
    }
  ]
}
{% endschema %}
